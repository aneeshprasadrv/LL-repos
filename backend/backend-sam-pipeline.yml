AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline for the SAM backend

Parameters:
  ProjectId:
    Type: String
    Description: Project ID.
    Default: buildingblocks-test-sam
#  CodeBucket:
#    Type: String
#    Description: Bucket in which you have code
#    Default: buildingblocks-testing-backend-automation-artifact
#  CodeKey:
#    Type: String
#    Description: key of zipped code
#    Default: testing/automation-backend.zip
  GithubOwner:
    Type: String
    Default: aneeshprasadrv
    Description: "Github repo owner"
  GithubRepo:
    Type: String
    Default: automation-backend
    Description: "Github repo name"
  GithubOAuthToken:
    Type: String
    Description: "Github personal access token"
    Default: '{{resolve:secretsmanager:github/personal-access-token-aneesh:SecretString}}'
  GithubBranch:
    Type: String
    Default: master
    Description: "e.g. master or main"
  Environment:
    Type: String
    Default: testing
    Description: "e.g. dev or prod" 
  StackName:
    Type: String
    Default: sam-app-ll-testing
    Description: "CF stack name"      

Resources:

#####################################################
## An artifact S3 Bucket to be used by CodePipeline
#####################################################
    ArtifactBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Join ['-', [buildingblocks, !Ref Environment, 'pipelineartifact']]
    
    ArtifactBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
      Properties:
        Bucket: !Ref ArtifactBucket
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Action:
                - 's3:GetObject'
                - 's3:GetObjectVersion'
                - 's3:GetBucketVersioning'
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${ArtifactBucket}'
                - !Sub 'arn:${AWS::Partition}:s3:::${ArtifactBucket}/*'
              Effect: Allow
              Principal:
                AWS:
                  - !GetAtt CodebuildRole.Arn
            - Action:
                - 's3:PutObject'
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${ArtifactBucket}'
                - !Sub 'arn:${AWS::Partition}:s3:::${ArtifactBucket}/*'
              Effect: Allow
              Principal:
                AWS:
                  - !GetAtt CodebuildRole.Arn
  


    # CodeCommitRepo:
    #   Type: 'AWS::CodeCommit::Repository'
    #   Description: Repo application source code
    #   Properties:
    #     RepositoryName: !Ref ProjectId
    #     Code:
    #       BranchName: main
    #       S3: 
    #         Bucket: !Ref CodeBucket
    #         Key: !Ref CodeKey

#####################################################
## CodeBuild
#####################################################
            
    CodeBuildProject:
      DependsOn:
        - CodebuildRole
      Type: 'AWS::CodeBuild::Project'
      Properties:
        Artifacts:
          Type: codepipeline
          Packaging: zip
        ServiceRole: !Ref CodebuildRole
        Environment:
          Type: LINUX_CONTAINER
          EnvironmentVariables:
             - Name: S3buildbucket
               Value: 
                 !Ref ArtifactBucket

          Image: 'aws/codebuild/standard:4.0'
          ComputeType: medium
        Source:
          Type: codepipeline
        Name: !Join ['-', [buildingblocks-sam, !Ref Environment, buildproject]]
        

    CodebuildRole:
      Type: 'AWS::IAM::Role'
      Description: Creating role for codebuild
      Properties:
        Path: /
        RoleName: !Sub 'CodebuildRole-buildingblocks-${Environment}'
        Policies:
          - PolicyName: CodebuildRolePolicy
            PolicyDocument:
              Statement:
                - Action:
                    - 'codecommit:*'
                    - 'codepipeline:*'
                    - 'codebuild:*'
                    - 's3:*'
                    - 'events:*'
                    - 'iam:PassRole'
                    - 'cloudwatch:*'
                    - 'kms:*'
                    - 'cloudformation:*'
                    - 'logs:*'
                    - 'cloudfront:CreateInvalidation'
                  Resource: '*'
                  Effect: Allow

        AssumeRolePolicyDocument:
          Statement:
            - Action: 'sts:AssumeRole'
              Effect: Allow
              Principal:
                Service:
                  - codebuild.amazonaws.com
                  - codedeploy.amazonaws.com
                  - codepipeline.amazonaws.com
                  - events.amazonaws.com
                  
    # SourceEvent:
    #   Type: 'AWS::Events::Rule'
    #   Properties:
    #     EventPattern:
    #       detail-type:
    #         - CodeCommit Repository State Change
    #       resources:
    #         - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref ProjectId ] ]
    #       detail:
    #         referenceType:
    #           - branch
    #         event:
    #           - referenceCreated
    #           - referenceUpdated
    #         referenceName:
    #           - main
    #       source:
    #         - aws.codecommit
    #     Description: >-
    #       Rule for Amazon CloudWatch Events to detect changes to the source
    #       repository and trigger pipeline execution
    #     State: ENABLED
    #     Targets:
    #       - Id: ProjectPipelineTarget
    #         Arn: !Sub >-
    #           arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectId}-Pipeline
    #         RoleArn: !GetAtt CodebuildRole.Arn
    #     Name: Demo_Source_Event


############ Integration tests function
    StartTestsFunctionExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: 
                - 'sts:AssumeRole'
              Effect: Allow
              Principal:
                Service: 
                  - lambda.amazonaws.com
        Path: /
        Policies:
          - PolicyName: InvokeAsync
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - 'lambda:InvokeAsync'
                    - 'lambda:InvokeFunction'
                    - 'cloudformation:DescribeStacks'
                    - 'codepipeline:*'
                    - 'logs:*'
                  Effect: Allow
                  Resource: '*'

    StartTestsFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Join ['-', [buildingblocks, !Ref Environment, 'lambda-pipeline']]
        Description: !Sub 'Starts integration tests function Testing'
        Handler: index.lambda_handler
        MemorySize: 128
        Role: !GetAtt StartTestsFunctionExecutionRole.Arn
        Runtime: python2.7
        Timeout: 10
        Code:
          ZipFile: >
            import json

            import boto3

            import uuid

            cp = boto3.client("codepipeline")

            cf = boto3.client("cloudformation")

            lambda_client = boto3.client("lambda")

            def lambda_handler(event, context):
                print json.dumps(event, sort_keys=True, indent=4, separators=(',', ': '))

                job_id = event["CodePipeline.job"]["id"] 
                user_parameters = event["CodePipeline.job"]["data"]["actionConfiguration"]["configuration"]["UserParameters"]
                stack_name = user_parameters.split("|")[0]
                test_stack_name = user_parameters.split("|")[1]
                stage = user_parameters.split("|")[2]

                print("looking for ApiUrl in {} Stack".format(stack_name))
                api_url, error = _get_property_from_stack(stack_name, "ApiUrl")
                if not api_url:
                    _fail_job(job_id, error)
                    return

                print("looking for TestFunction in {} Stack".format(test_stack_name))
                test_function, error = _get_property_from_stack(test_stack_name, "TestFunction")
                if not test_function:
                    _fail_job(job_id, error)
                    return

                lambda_client.invoke_async(
                  FunctionName=test_function,
                  InvokeArgs=json.dumps({
                    "job_id": job_id,
                    "api_url": api_url
                  })
                )

            def _get_property_from_stack(stack_name, property_key):
                stack_data = cf.describe_stacks(StackName=stack_name)

                if not stack_data or len(stack_data["Stacks"]) == 0:
                    return None, "Could not find stack"
                    
                current_stack = stack_data["Stacks"][0]

                if "Outputs" not in current_stack:
                    return None, "Could not find outputs in stack"
                    
                for cur_output in current_stack["Outputs"]:
                    if cur_output["OutputKey"] == property_key:
                        return cur_output["OutputValue"], None
                
                return None, "Could not find {} output property in stack".format(property_key)

            def _complete_job(job_id):
                cp.put_job_success_result(jobId=job_id)

            def _fail_job(job_id, failure_reason):
                cp.put_job_failure_result(
                        jobId=job_id,
                        failureDetails={
                            'type': 'JobFailed',
                            'message': failure_reason,
                            'externalExecutionId': uuid.uuid4().hex
                        }
                    )
    
#####################################################
## Pipeline Creation
#####################################################

    PipelineExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Action: 
                    - 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                      Service: 
                        - codepipeline.amazonaws.com
            Path: /
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/AWSCodeCommitFullAccess'
                - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
                - !Ref CFNPipelinePolicy
            Policies:
                - PolicyName: CodePipelineAccess
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                        - Action:
                            - 'iam:PassRole'
                            - 'lambda:InvokeFunction'
                            - 'lambda:ListFunctions'
                            - 'lambda:InvokeAsyc'
                          Effect: Allow
                          Resource: '*'    

    DemoPipeline:
      DependsOn:
        - CodebuildRole
        - ArtifactBucket
        - CodeBuildProject
      Type: 'AWS::CodePipeline::Pipeline'
      Description: Creating an AWS CodePipeline
      Properties:
        RoleArn: !GetAtt PipelineExecutionRole.Arn
        Name: !Join ['-', [buildingblocks-sam, !Ref Environment, 'pipeline']]
        ArtifactStore:
          Type: S3
          Location: !Ref ArtifactBucket
        Stages:
          # - Actions:
          #     - ActionTypeId:
          #         Owner: AWS
          #         Category: Source
          #         Version: 1
          #         Provider: CodeCommit
          #       Configuration:
          #         PollForSourceChanges: false
          #         RepositoryName: !Ref ProjectId
          #         BranchName: main
          #       InputArtifacts: []
          #       OutputArtifacts:
          #         - Name: !Sub '${ProjectId}-SourceArtifact'
          #       RunOrder: 1
          #       Name: ApplicationSource
          #   Name: Source
          - 
            Name: Source
            Actions: 
              - 
              
                ActionTypeId: 
                  Category: Source
                  Owner: ThirdParty
                  Provider: GitHub
                  Version: 1
                Configuration:
                  Owner: !Ref GithubOwner
                  Repo: !Ref GithubRepo
                  Branch: !Ref GithubBranch
                  OAuthToken: !Ref GithubOAuthToken
                InputArtifacts: []
                OutputArtifacts:
                  - Name: !Sub '${ProjectId}-SourceArtifact'
                RunOrder: 1
                Name: ApplicationSource

                
          - Actions:
              - ActionTypeId:
                  Owner: AWS
                  Category: Build
                  Version: 1
                  Provider: CodeBuild
                Configuration:
                  ProjectName: !Join ['-', [buildingblocks-sam, !Ref Environment, buildproject]]
                InputArtifacts:
                  - Name: !Sub '${ProjectId}-SourceArtifact'
                OutputArtifacts: 
                  - Name: Lambda-Get-Artifact
                RunOrder: 1
                Name: PackageExport
            Name: Build

          - Name: DeployTests
            Actions:
                    - Name: CreateChangeSet
                      ActionTypeId:
                        Category: Deploy
                        Owner: AWS
                        Provider: CloudFormation
                        Version: 1
                      Configuration:
                        ActionMode: CHANGE_SET_REPLACE
                        RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                        StackName: !Ref StackName
                        ChangeSetName: !Join ['-', [!Ref StackName, change]]
                        TemplatePath: Lambda-Get-Artifact::packaged-template.yaml
                        Capabilities: CAPABILITY_IAM
                      InputArtifacts:
                        - Name: Lambda-Get-Artifact
                      OutputArtifacts:
                        - Name: TestChangeSet
                      RunOrder: 1
                    - Name: ExecuteChangeSet
                      ActionTypeId:
                        Category: Deploy
                        Owner: AWS
                        Provider: CloudFormation
                        Version: 1
                      Configuration:
                        ActionMode: CHANGE_SET_EXECUTE
                        RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                        StackName: !Ref StackName
                        ChangeSetName: !Join ['-', [!Ref StackName, change]]
                      OutputArtifacts:
                        - Name: ExecutedTestChangeSet
                      RunOrder: 2  


# CodePipeline definition and required roles
    CFNPipelinePolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            Description: CloudFormation Pipeline Execution Policy
            Path: "/"
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    Effect: Allow
                    Action: 
                        - 'cloudformation:CreateStack'
                        - 'cloudformation:DescribeStacks'
                        - 'cloudformation:DeleteStack'
                        - 'cloudformation:UpdateStack'
                        - 'cloudformation:CreateChangeSet'
                        - 'cloudformation:ExecuteChangeSet'
                        - 'cloudformation:DeleteChangeSet'
                        - 'cloudformation:DescribeChangeSet'
                        - 'cloudformation:SetStackPolicy'
                        - 'cloudformation:SetStackPolicy'
                        - 'cloudformation:ValidateTemplate'
                        - 'codebuild:StartBuild'
                        - 'codebuild:BatchGetBuilds'
                    Resource: "*"
    CloudFormationExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AdministratorAccess'

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${DemoPipeline}
    Description: CodePipeline URL